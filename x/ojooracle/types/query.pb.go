// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: comdex/ojooracle/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryFetchPriceRequest struct {
	RequestId int64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryFetchPriceRequest) Reset()         { *m = QueryFetchPriceRequest{} }
func (m *QueryFetchPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFetchPriceRequest) ProtoMessage()    {}
func (*QueryFetchPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{2}
}
func (m *QueryFetchPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchPriceRequest.Merge(m, src)
}
func (m *QueryFetchPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchPriceRequest proto.InternalMessageInfo

func (m *QueryFetchPriceRequest) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type QueryFetchPriceResponse struct {
	Result *FetchPriceResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryFetchPriceResponse) Reset()         { *m = QueryFetchPriceResponse{} }
func (m *QueryFetchPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFetchPriceResponse) ProtoMessage()    {}
func (*QueryFetchPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{3}
}
func (m *QueryFetchPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchPriceResponse.Merge(m, src)
}
func (m *QueryFetchPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchPriceResponse proto.InternalMessageInfo

func (m *QueryFetchPriceResponse) GetResult() *FetchPriceResult {
	if m != nil {
		return m.Result
	}
	return nil
}

type QueryLastFetchPriceIdRequest struct {
}

func (m *QueryLastFetchPriceIdRequest) Reset()         { *m = QueryLastFetchPriceIdRequest{} }
func (m *QueryLastFetchPriceIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastFetchPriceIdRequest) ProtoMessage()    {}
func (*QueryLastFetchPriceIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{4}
}
func (m *QueryLastFetchPriceIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastFetchPriceIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastFetchPriceIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastFetchPriceIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastFetchPriceIdRequest.Merge(m, src)
}
func (m *QueryLastFetchPriceIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastFetchPriceIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastFetchPriceIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastFetchPriceIdRequest proto.InternalMessageInfo

type QueryLastFetchPriceIdResponse struct {
	RequestId int64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
}

func (m *QueryLastFetchPriceIdResponse) Reset()         { *m = QueryLastFetchPriceIdResponse{} }
func (m *QueryLastFetchPriceIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastFetchPriceIdResponse) ProtoMessage()    {}
func (*QueryLastFetchPriceIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{5}
}
func (m *QueryLastFetchPriceIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastFetchPriceIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastFetchPriceIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastFetchPriceIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastFetchPriceIdResponse.Merge(m, src)
}
func (m *QueryLastFetchPriceIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastFetchPriceIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastFetchPriceIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastFetchPriceIdResponse proto.InternalMessageInfo

func (m *QueryLastFetchPriceIdResponse) GetRequestId() int64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

type QueryFetchPriceDataRequest struct {
}

func (m *QueryFetchPriceDataRequest) Reset()         { *m = QueryFetchPriceDataRequest{} }
func (m *QueryFetchPriceDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFetchPriceDataRequest) ProtoMessage()    {}
func (*QueryFetchPriceDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{6}
}
func (m *QueryFetchPriceDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchPriceDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchPriceDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchPriceDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchPriceDataRequest.Merge(m, src)
}
func (m *QueryFetchPriceDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchPriceDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchPriceDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchPriceDataRequest proto.InternalMessageInfo

type QueryFetchPriceDataResponse struct {
	MsgFetchPriceData MsgFetchPriceData `protobuf:"bytes,1,opt,name=msgFetchPriceData,proto3" json:"msgFetchPriceData" yaml:"msgFetchPriceData"`
}

func (m *QueryFetchPriceDataResponse) Reset()         { *m = QueryFetchPriceDataResponse{} }
func (m *QueryFetchPriceDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFetchPriceDataResponse) ProtoMessage()    {}
func (*QueryFetchPriceDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{7}
}
func (m *QueryFetchPriceDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFetchPriceDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFetchPriceDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFetchPriceDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFetchPriceDataResponse.Merge(m, src)
}
func (m *QueryFetchPriceDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFetchPriceDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFetchPriceDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFetchPriceDataResponse proto.InternalMessageInfo

func (m *QueryFetchPriceDataResponse) GetMsgFetchPriceData() MsgFetchPriceData {
	if m != nil {
		return m.MsgFetchPriceData
	}
	return MsgFetchPriceData{}
}

type QueryDiscardDataRequest struct {
}

func (m *QueryDiscardDataRequest) Reset()         { *m = QueryDiscardDataRequest{} }
func (m *QueryDiscardDataRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDiscardDataRequest) ProtoMessage()    {}
func (*QueryDiscardDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{8}
}
func (m *QueryDiscardDataRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDiscardDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDiscardDataRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDiscardDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDiscardDataRequest.Merge(m, src)
}
func (m *QueryDiscardDataRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDiscardDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDiscardDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDiscardDataRequest proto.InternalMessageInfo

type QueryDiscardDataResponse struct {
	DiscardData DiscardData `protobuf:"bytes,1,opt,name=discardData,proto3" json:"discardData" yaml:"discardData"`
}

func (m *QueryDiscardDataResponse) Reset()         { *m = QueryDiscardDataResponse{} }
func (m *QueryDiscardDataResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDiscardDataResponse) ProtoMessage()    {}
func (*QueryDiscardDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4ab51586d9fca3d1, []int{9}
}
func (m *QueryDiscardDataResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDiscardDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDiscardDataResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDiscardDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDiscardDataResponse.Merge(m, src)
}
func (m *QueryDiscardDataResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDiscardDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDiscardDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDiscardDataResponse proto.InternalMessageInfo

func (m *QueryDiscardDataResponse) GetDiscardData() DiscardData {
	if m != nil {
		return m.DiscardData
	}
	return DiscardData{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "comdex.ojooracle.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "comdex.ojooracle.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryFetchPriceRequest)(nil), "comdex.ojooracle.v1beta1.QueryFetchPriceRequest")
	proto.RegisterType((*QueryFetchPriceResponse)(nil), "comdex.ojooracle.v1beta1.QueryFetchPriceResponse")
	proto.RegisterType((*QueryLastFetchPriceIdRequest)(nil), "comdex.ojooracle.v1beta1.QueryLastFetchPriceIdRequest")
	proto.RegisterType((*QueryLastFetchPriceIdResponse)(nil), "comdex.ojooracle.v1beta1.QueryLastFetchPriceIdResponse")
	proto.RegisterType((*QueryFetchPriceDataRequest)(nil), "comdex.ojooracle.v1beta1.QueryFetchPriceDataRequest")
	proto.RegisterType((*QueryFetchPriceDataResponse)(nil), "comdex.ojooracle.v1beta1.QueryFetchPriceDataResponse")
	proto.RegisterType((*QueryDiscardDataRequest)(nil), "comdex.ojooracle.v1beta1.QueryDiscardDataRequest")
	proto.RegisterType((*QueryDiscardDataResponse)(nil), "comdex.ojooracle.v1beta1.QueryDiscardDataResponse")
}

func init() {
	proto.RegisterFile("comdex/ojooracle/v1beta1/query.proto", fileDescriptor_4ab51586d9fca3d1)
}

var fileDescriptor_4ab51586d9fca3d1 = []byte{
	// 649 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0xdd, 0x6a, 0xd4, 0x4e,
	0x18, 0xc6, 0x37, 0xff, 0x3f, 0x2e, 0x38, 0x45, 0xd1, 0xb1, 0xea, 0x1a, 0xdb, 0xb4, 0x8d, 0x16,
	0x6d, 0x6b, 0x93, 0x7e, 0x68, 0x0b, 0x45, 0x3c, 0x08, 0x8b, 0x50, 0xb0, 0x58, 0x73, 0x28, 0xc8,
	0x32, 0x9b, 0xcc, 0xa6, 0x91, 0xec, 0x4e, 0x9a, 0xcc, 0x4a, 0x97, 0x22, 0x82, 0x57, 0x50, 0xf0,
	0xcc, 0x73, 0x6f, 0xc0, 0x53, 0x6f, 0xa0, 0x87, 0x05, 0x4f, 0x3c, 0x2a, 0xb2, 0xeb, 0x15, 0xe8,
	0x0d, 0x48, 0x66, 0xde, 0x75, 0xb3, 0x9b, 0x66, 0x3f, 0xce, 0x96, 0x99, 0xe7, 0x79, 0xe6, 0xf7,
	0xce, 0xbc, 0xef, 0x06, 0xdd, 0x77, 0x58, 0xdd, 0xa5, 0x47, 0x26, 0x7b, 0xcb, 0x58, 0x44, 0x9c,
	0x80, 0x9a, 0xef, 0xd6, 0xab, 0x94, 0x93, 0x75, 0xf3, 0xb0, 0x49, 0xa3, 0x96, 0x11, 0x46, 0x8c,
	0x33, 0x5c, 0x92, 0x2a, 0xe3, 0x9f, 0xca, 0x00, 0x95, 0x3a, 0xed, 0x31, 0x8f, 0x09, 0x91, 0x99,
	0xfc, 0x92, 0x7a, 0x75, 0xc6, 0x63, 0xcc, 0x0b, 0xa8, 0x49, 0x42, 0xdf, 0x24, 0x8d, 0x06, 0xe3,
	0x84, 0xfb, 0xac, 0x11, 0xc3, 0xee, 0x72, 0xee, 0x99, 0x35, 0xca, 0x9d, 0x83, 0x4a, 0x18, 0xf9,
	0x0e, 0x05, 0xed, 0x62, 0xae, 0x36, 0x24, 0x11, 0xa9, 0x77, 0x23, 0x17, 0x72, 0x65, 0xfc, 0x48,
	0x4a, 0xf4, 0x69, 0x84, 0x5f, 0x25, 0x25, 0xed, 0x0b, 0x9f, 0x4d, 0x0f, 0x9b, 0x34, 0xe6, 0x7a,
	0x0d, 0xdd, 0xe8, 0x5b, 0x8d, 0x43, 0xd6, 0x88, 0x29, 0x7e, 0x89, 0x8a, 0x32, 0xbf, 0xa4, 0xcc,
	0x2b, 0x0f, 0xa7, 0x36, 0xe6, 0x8d, 0xbc, 0x1b, 0x30, 0xa4, 0xd3, 0xba, 0x79, 0x7a, 0x3e, 0x57,
	0xf8, 0x7d, 0x3e, 0x77, 0xa5, 0x45, 0xea, 0xc1, 0x8e, 0x2e, 0xdd, 0xba, 0x0d, 0x31, 0xfa, 0x36,
	0xba, 0x25, 0xce, 0x79, 0x9e, 0x54, 0xb8, 0x9f, 0x14, 0x08, 0x04, 0x78, 0x16, 0xa1, 0x48, 0xfe,
	0xac, 0xf8, 0xae, 0x38, 0xee, 0x7f, 0xfb, 0x32, 0xac, 0xec, 0xba, 0xfa, 0x1b, 0x74, 0x3b, 0x63,
	0x04, 0x48, 0x0b, 0x15, 0x23, 0x1a, 0x37, 0x03, 0x0e, 0x90, 0xcb, 0xf9, 0x90, 0x7d, 0xee, 0x66,
	0xc0, 0x6d, 0x70, 0xea, 0x1a, 0x9a, 0x11, 0xf1, 0x2f, 0x48, 0xcc, 0x7b, 0xa2, 0x5d, 0xb7, 0x7b,
	0x3f, 0xcf, 0xd0, 0x6c, 0xce, 0x3e, 0x40, 0x8c, 0xc0, 0x9f, 0x41, 0xea, 0x00, 0x7e, 0x99, 0x70,
	0xd2, 0x4d, 0xff, 0xac, 0xa0, 0xbb, 0x17, 0x6e, 0x43, 0xf8, 0x31, 0xba, 0x5e, 0x8f, 0xbd, 0xfe,
	0x4d, 0x28, 0x76, 0x25, 0xbf, 0xd8, 0xbd, 0x41, 0x8b, 0x35, 0x0f, 0x8f, 0x53, 0x92, 0x8f, 0x93,
	0xc9, 0xd4, 0xed, 0xec, 0x39, 0xfa, 0x1d, 0xb8, 0xf9, 0xb2, 0x1f, 0x3b, 0x24, 0x72, 0xd3, 0xdc,
	0x1f, 0x50, 0x29, 0xbb, 0x05, 0xcc, 0x0e, 0x9a, 0x72, 0x7b, 0xcb, 0x40, 0xbb, 0x98, 0x4f, 0x9b,
	0xca, 0xb0, 0x54, 0xe0, 0xc4, 0x92, 0x33, 0x95, 0xa3, 0xdb, 0xe9, 0xd4, 0x8d, 0x3f, 0x45, 0x74,
	0x49, 0x10, 0xe0, 0x13, 0x05, 0x15, 0x65, 0x0b, 0xe2, 0x47, 0xf9, 0x87, 0x64, 0x3b, 0x5f, 0x5d,
	0x1d, 0x53, 0x2d, 0xcb, 0xd2, 0x97, 0x3e, 0x7e, 0xff, 0xf5, 0xe9, 0xbf, 0x7b, 0x78, 0xc1, 0x84,
	0x51, 0xab, 0x92, 0x86, 0x7b, 0xe1, 0x48, 0xe2, 0x6f, 0x0a, 0xba, 0x36, 0xd8, 0x70, 0x78, 0x6d,
	0xc4, 0x71, 0x99, 0xc1, 0x50, 0xd7, 0x27, 0x70, 0x00, 0xa4, 0x25, 0x20, 0x9f, 0xe2, 0x9d, 0x21,
	0x90, 0xa9, 0xff, 0x98, 0x8a, 0x1c, 0x02, 0xf3, 0xb8, 0xd7, 0xc1, 0xef, 0x05, 0xfd, 0x40, 0xb7,
	0x97, 0xf1, 0xd6, 0x08, 0x96, 0x9c, 0xf1, 0x51, 0xb7, 0x27, 0xf6, 0x41, 0x25, 0x5b, 0xa2, 0x92,
	0x35, 0x6c, 0x0c, 0xa9, 0x24, 0x20, 0x31, 0xaf, 0xa4, 0xcb, 0xf1, 0x5d, 0xfc, 0x55, 0x41, 0x57,
	0xfb, 0xfb, 0x18, 0x3f, 0x1e, 0xfb, 0x1e, 0x53, 0x2d, 0xae, 0x3e, 0x99, 0xd0, 0x05, 0xdc, 0x9b,
	0x82, 0x7b, 0x15, 0xaf, 0x8c, 0xf9, 0x02, 0x6e, 0x42, 0xf8, 0x45, 0x41, 0x53, 0xa9, 0x31, 0xc0,
	0xa3, 0x5e, 0x3e, 0x3b, 0x91, 0xea, 0xc6, 0x24, 0x16, 0x60, 0x35, 0x05, 0xeb, 0x12, 0x7e, 0x30,
	0x84, 0x15, 0x86, 0x4e, 0x70, 0x5a, 0x7b, 0xa7, 0x6d, 0x4d, 0x39, 0x6b, 0x6b, 0xca, 0xcf, 0xb6,
	0xa6, 0x9c, 0x74, 0xb4, 0xc2, 0x59, 0x47, 0x2b, 0xfc, 0xe8, 0x68, 0x85, 0xd7, 0x9b, 0x9e, 0xcf,
	0x0f, 0x9a, 0xd5, 0x04, 0x02, 0xc2, 0x56, 0x59, 0xad, 0xe6, 0x3b, 0x3e, 0x09, 0xba, 0xe1, 0xe9,
	0x8f, 0x13, 0x6f, 0x85, 0x34, 0xae, 0x16, 0xc5, 0x87, 0x69, 0xf3, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x98, 0xc9, 0x32, 0x83, 0x84, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	FetchPriceResult(ctx context.Context, in *QueryFetchPriceRequest, opts ...grpc.CallOption) (*QueryFetchPriceResponse, error)
	LastFetchPriceID(ctx context.Context, in *QueryLastFetchPriceIdRequest, opts ...grpc.CallOption) (*QueryLastFetchPriceIdResponse, error)
	FetchPriceData(ctx context.Context, in *QueryFetchPriceDataRequest, opts ...grpc.CallOption) (*QueryFetchPriceDataResponse, error)
	DiscardData(ctx context.Context, in *QueryDiscardDataRequest, opts ...grpc.CallOption) (*QueryDiscardDataResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/comdex.ojooracle.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FetchPriceResult(ctx context.Context, in *QueryFetchPriceRequest, opts ...grpc.CallOption) (*QueryFetchPriceResponse, error) {
	out := new(QueryFetchPriceResponse)
	err := c.cc.Invoke(ctx, "/comdex.ojooracle.v1beta1.Query/FetchPriceResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastFetchPriceID(ctx context.Context, in *QueryLastFetchPriceIdRequest, opts ...grpc.CallOption) (*QueryLastFetchPriceIdResponse, error) {
	out := new(QueryLastFetchPriceIdResponse)
	err := c.cc.Invoke(ctx, "/comdex.ojooracle.v1beta1.Query/LastFetchPriceID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FetchPriceData(ctx context.Context, in *QueryFetchPriceDataRequest, opts ...grpc.CallOption) (*QueryFetchPriceDataResponse, error) {
	out := new(QueryFetchPriceDataResponse)
	err := c.cc.Invoke(ctx, "/comdex.ojooracle.v1beta1.Query/FetchPriceData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DiscardData(ctx context.Context, in *QueryDiscardDataRequest, opts ...grpc.CallOption) (*QueryDiscardDataResponse, error) {
	out := new(QueryDiscardDataResponse)
	err := c.cc.Invoke(ctx, "/comdex.ojooracle.v1beta1.Query/DiscardData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	FetchPriceResult(context.Context, *QueryFetchPriceRequest) (*QueryFetchPriceResponse, error)
	LastFetchPriceID(context.Context, *QueryLastFetchPriceIdRequest) (*QueryLastFetchPriceIdResponse, error)
	FetchPriceData(context.Context, *QueryFetchPriceDataRequest) (*QueryFetchPriceDataResponse, error)
	DiscardData(context.Context, *QueryDiscardDataRequest) (*QueryDiscardDataResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) FetchPriceResult(ctx context.Context, req *QueryFetchPriceRequest) (*QueryFetchPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPriceResult not implemented")
}
func (*UnimplementedQueryServer) LastFetchPriceID(ctx context.Context, req *QueryLastFetchPriceIdRequest) (*QueryLastFetchPriceIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastFetchPriceID not implemented")
}
func (*UnimplementedQueryServer) FetchPriceData(ctx context.Context, req *QueryFetchPriceDataRequest) (*QueryFetchPriceDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchPriceData not implemented")
}
func (*UnimplementedQueryServer) DiscardData(ctx context.Context, req *QueryDiscardDataRequest) (*QueryDiscardDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscardData not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.ojooracle.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FetchPriceResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFetchPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FetchPriceResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.ojooracle.v1beta1.Query/FetchPriceResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FetchPriceResult(ctx, req.(*QueryFetchPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastFetchPriceID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastFetchPriceIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastFetchPriceID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.ojooracle.v1beta1.Query/LastFetchPriceID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastFetchPriceID(ctx, req.(*QueryLastFetchPriceIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FetchPriceData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFetchPriceDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FetchPriceData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.ojooracle.v1beta1.Query/FetchPriceData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FetchPriceData(ctx, req.(*QueryFetchPriceDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DiscardData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDiscardDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DiscardData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comdex.ojooracle.v1beta1.Query/DiscardData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DiscardData(ctx, req.(*QueryDiscardDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comdex.ojooracle.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "FetchPriceResult",
			Handler:    _Query_FetchPriceResult_Handler,
		},
		{
			MethodName: "LastFetchPriceID",
			Handler:    _Query_LastFetchPriceID_Handler,
		},
		{
			MethodName: "FetchPriceData",
			Handler:    _Query_FetchPriceData_Handler,
		},
		{
			MethodName: "DiscardData",
			Handler:    _Query_DiscardData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "comdex/ojooracle/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryFetchPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		{
			size, err := m.Result.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastFetchPriceIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastFetchPriceIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastFetchPriceIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastFetchPriceIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastFetchPriceIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastFetchPriceIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RequestId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryFetchPriceDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchPriceDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchPriceDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryFetchPriceDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFetchPriceDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFetchPriceDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.MsgFetchPriceData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDiscardDataRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDiscardDataRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDiscardDataRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDiscardDataResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDiscardDataResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDiscardDataResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DiscardData.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFetchPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryFetchPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastFetchPriceIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastFetchPriceIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovQuery(uint64(m.RequestId))
	}
	return n
}

func (m *QueryFetchPriceDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryFetchPriceDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MsgFetchPriceData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDiscardDataRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDiscardDataResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DiscardData.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &FetchPriceResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastFetchPriceIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastFetchPriceIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastFetchPriceIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastFetchPriceIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastFetchPriceIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastFetchPriceIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchPriceDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchPriceDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchPriceDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFetchPriceDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFetchPriceDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFetchPriceDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgFetchPriceData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MsgFetchPriceData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDiscardDataRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDiscardDataRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDiscardDataRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDiscardDataResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDiscardDataResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDiscardDataResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscardData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DiscardData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
